// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PodNoms.Common.Persistence;

namespace PodNoms.Comon.Migrations
{
    [DbContext(typeof(PodNomsDbContext))]
    [Migration("20200725133602_AddPlaylistIdToPodcastEntry")]
    partial class AddPlaylistIdToPodcastEntry
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "b7ae3daa-e2e5-4b02-8102-aa5ac17a5ff6",
                            ConcurrencyStamp = "995a3078-7b68-4476-b96b-62e559048633",
                            Name = "website-admin",
                            NormalizedName = "WEBSITE-ADMIN"
                        },
                        new
                        {
                            Id = "a1de37ce-e61b-49a9-a0b2-7330ca3aa697",
                            ConcurrencyStamp = "a39fe0e4-e7f3-4ad0-8002-e5c131cca8b3",
                            Name = "catastrophic-api-calls-allowed",
                            NormalizedName = "CATASTROPHIC-API-CALLS-ALLOWED"
                        },
                        new
                        {
                            Id = "f27a5f6c-2056-4c0c-866b-0ac6a433415b",
                            ConcurrencyStamp = "4c32882e-58d0-415c-a91d-6e6e279fbd02",
                            Name = "god-mode",
                            NormalizedName = "GOD-MODE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PodNoms.Data.Models.AccountSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiptURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("WasSuccessful")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("AccountSubscriptions");
                });

            modelBuilder.Entity("PodNoms.Data.Models.ActivityLogPodcastEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("ExtraInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<Guid?>("PodcastEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Referrer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PodcastEntryId");

                    b.ToTable("ActivityLogPodcastEntry");
                });

            modelBuilder.Entity("PodNoms.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DiskQuota")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("EmailNotificationOptions")
                        .HasColumnType("int");

                    b.Property<long?>("FacebookId")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastSeen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TwitterHandle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasFilter("[Slug] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PodNoms.Data.Models.ApplicationUserSlugRedirects", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("OldSlug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ApplicationUserSlugRedirects");
                });

            modelBuilder.Entity("PodNoms.Data.Models.BoilerPlate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL");

                    b.ToTable("BoilerPlates");
                });

            modelBuilder.Entity("PodNoms.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("29c0716a-94bc-4b79-bb7a-1acb2d872101"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(2595),
                            Description = "Comedy",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(2596)
                        },
                        new
                        {
                            Id = new Guid("db829bfe-a8fe-458e-9b67-2b00f4794750"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3118),
                            Description = "Technology",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3119)
                        },
                        new
                        {
                            Id = new Guid("50495352-2339-4498-aad3-3f8c85f6ac69"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3137),
                            Description = "Science & Medicine",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3138)
                        },
                        new
                        {
                            Id = new Guid("f0603194-6f45-4695-98c1-6288cffbfd94"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3141),
                            Description = "Business",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3141)
                        },
                        new
                        {
                            Id = new Guid("67d057a7-21b4-4462-a284-66ba62a6de1b"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3143),
                            Description = "Religion & Spirituality",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3143)
                        },
                        new
                        {
                            Id = new Guid("3219621b-8311-4b65-bb48-6f68fba4957c"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3146),
                            Description = "Kids & Family",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3146)
                        },
                        new
                        {
                            Id = new Guid("a6aa8e20-8729-4698-a254-976012afdbf3"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3148),
                            Description = "TV & Film",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3149)
                        },
                        new
                        {
                            Id = new Guid("97735523-d87a-4b5f-9dd1-ab8289af2ae6"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3151),
                            Description = "Sports & Recreation",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3151)
                        },
                        new
                        {
                            Id = new Guid("f177d65b-5eca-4137-b202-af672cd11d70"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3153),
                            Description = "Society & Culture",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3154)
                        },
                        new
                        {
                            Id = new Guid("27fb7005-b75c-490b-ae13-bcc88525be65"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3156),
                            Description = "Music",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3156)
                        },
                        new
                        {
                            Id = new Guid("c4911d87-2b6e-42ea-b771-be910cb01624"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3159),
                            Description = "Health",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3159)
                        },
                        new
                        {
                            Id = new Guid("5e023a7a-461d-46c6-bca8-c9049f6d2ec5"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3161),
                            Description = "News & Politics",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3161)
                        },
                        new
                        {
                            Id = new Guid("b13cddb1-feff-42e1-9c80-cb8ad4a5f374"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3164),
                            Description = "Games & Hobbies",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3164)
                        },
                        new
                        {
                            Id = new Guid("ad31686b-794b-4ebb-99a8-cdc812ca7e83"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3167),
                            Description = "Education",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3167)
                        },
                        new
                        {
                            Id = new Guid("41b9ee87-a9ca-4305-8ed8-ee69a3dbcfc3"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3169),
                            Description = "Arts",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3169)
                        },
                        new
                        {
                            Id = new Guid("2e23f263-062a-43c3-9e27-fb7555fb8e76"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3171),
                            Description = "Government & Organizations",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 137, DateTimeKind.Utc).AddTicks(3172)
                        });
                });

            modelBuilder.Entity("PodNoms.Data.Models.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("FromUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MessageSeen")
                        .HasColumnType("datetime2");

                    b.Property<string>("ToUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("PodNoms.Data.Models.Donation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("PodNoms.Data.Models.EntryComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("FromUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSpam")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PodcastEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Timestamp")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("PodcastEntryId");

                    b.ToTable("EntryComments");
                });

            modelBuilder.Entity("PodNoms.Data.Models.IssuedApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("IssuedToId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.Property<string>("Scopes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("IssuedToId");

                    b.ToTable("IssuedApiKeys");
                });

            modelBuilder.Entity("PodNoms.Data.Models.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Config")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("PodcastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("PodcastId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PodNoms.Data.Models.Notifications.NotificationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Log")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Succeeded")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationLogs");
                });

            modelBuilder.Entity("PodNoms.Data.Models.PatreonToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<long>("ExpiresIn")
                        .HasColumnType("bigint");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique()
                        .HasFilter("[AppUserId] IS NOT NULL");

                    b.ToTable("PatreonTokens");
                });

            modelBuilder.Entity("PodNoms.Data.Models.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("PodcastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceUrl")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("PodcastId");

                    b.HasIndex("SourceUrl")
                        .IsUnique()
                        .HasFilter("[SourceUrl] IS NOT NULL");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("PodNoms.Data.Models.Podcast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("AuthPassword")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("AuthPasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("AuthUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CustomDomain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomRssDomain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleAnalyticsTrackingId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Private")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PublicTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasFilter("[Slug] IS NOT NULL");

                    b.ToTable("Podcasts");
                });

            modelBuilder.Entity("PodNoms.Data.Models.PodcastAggregator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PodcastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PodcastId");

                    b.ToTable("PodcastAggregators");
                });

            modelBuilder.Entity("PodNoms.Data.Models.PodcastEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("AudioFileSize")
                        .HasColumnType("bigint");

                    b.Property<float>("AudioLength")
                        .HasColumnType("real");

                    b.Property<string>("AudioUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MetadataStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("PlaylistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PodcastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Processed")
                        .HasColumnType("bit");

                    b.Property<string>("ProcessingPayload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessingStatus")
                        .HasColumnType("int");

                    b.Property<int>("ShareOptions")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SourceCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SourceItemId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("WaveformGenerated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("PodcastId");

                    b.ToTable("PodcastEntries");
                });

            modelBuilder.Entity("PodNoms.Data.Models.PodcastEntrySharingLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LinkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LinkIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("PodcastEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LinkId")
                        .IsUnique()
                        .HasFilter("[LinkId] IS NOT NULL");

                    b.HasIndex("LinkIndex")
                        .IsUnique();

                    b.HasIndex("PodcastEntryId");

                    b.ToTable("PodcastEntrySharingLinks");
                });

            modelBuilder.Entity("PodNoms.Data.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("RemoteIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("PodNoms.Data.Models.ServerConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServerConfig","admin");
                });

            modelBuilder.Entity("PodNoms.Data.Models.ServerShowcase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DiskSpaceThreshold")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntryCountThreshold")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("PodcastCountThreshold")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServerShowcases");
                });

            modelBuilder.Entity("PodNoms.Data.Models.Subcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PodcastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PodcastId");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f4b0b76-d7b8-404c-af32-3428fc488e30"),
                            CategoryId = new Guid("b13cddb1-feff-42e1-9c80-cb8ad4a5f374"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(5975),
                            Description = "Video Games",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(5976)
                        },
                        new
                        {
                            Id = new Guid("84ed0b38-616d-4926-90c2-3cc7ae2f8e4e"),
                            CategoryId = new Guid("97735523-d87a-4b5f-9dd1-ab8289af2ae6"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6406),
                            Description = "Professional",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6406)
                        },
                        new
                        {
                            Id = new Guid("867ae49c-ade1-41b9-ba18-3f4801ec18ee"),
                            CategoryId = new Guid("c4911d87-2b6e-42ea-b771-be910cb01624"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6426),
                            Description = "Fitness & Nutrition",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6426)
                        },
                        new
                        {
                            Id = new Guid("b4284990-c542-48e4-a000-42d27202153b"),
                            CategoryId = new Guid("2e23f263-062a-43c3-9e27-fb7555fb8e76"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6431),
                            Description = "Non-Profit",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6431)
                        },
                        new
                        {
                            Id = new Guid("c950eaac-f164-4f3c-8384-459679130aef"),
                            CategoryId = new Guid("97735523-d87a-4b5f-9dd1-ab8289af2ae6"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6435),
                            Description = "Outdoor",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6436)
                        },
                        new
                        {
                            Id = new Guid("df0063a6-31ef-4f9a-be23-4f9178291bb3"),
                            CategoryId = new Guid("ad31686b-794b-4ebb-99a8-cdc812ca7e83"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6440),
                            Description = "Higher Education",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6440)
                        },
                        new
                        {
                            Id = new Guid("2488b878-124a-42f9-a761-53daa1eefde1"),
                            CategoryId = new Guid("41b9ee87-a9ca-4305-8ed8-ee69a3dbcfc3"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6444),
                            Description = "Literature",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6444)
                        },
                        new
                        {
                            Id = new Guid("5c40fa5a-72df-475b-bfa8-561955145762"),
                            CategoryId = new Guid("67d057a7-21b4-4462-a284-66ba62a6de1b"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6448),
                            Description = "Other",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6449)
                        },
                        new
                        {
                            Id = new Guid("201fb42b-e241-4e16-bea5-5df768064402"),
                            CategoryId = new Guid("f0603194-6f45-4695-98c1-6288cffbfd94"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6452),
                            Description = "Investing",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6453)
                        },
                        new
                        {
                            Id = new Guid("4f006295-e8ea-4a87-92e0-69e32f8d3ad9"),
                            CategoryId = new Guid("b13cddb1-feff-42e1-9c80-cb8ad4a5f374"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6456),
                            Description = "Aviation",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6457)
                        },
                        new
                        {
                            Id = new Guid("8b2a590b-bb59-4f30-acb2-72fa01985e4b"),
                            CategoryId = new Guid("50495352-2339-4498-aad3-3f8c85f6ac69"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6460),
                            Description = "Social Sciences",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6461)
                        },
                        new
                        {
                            Id = new Guid("3e3f77a4-4cd3-4644-ace1-7923e84d403d"),
                            CategoryId = new Guid("41b9ee87-a9ca-4305-8ed8-ee69a3dbcfc3"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6464),
                            Description = "Performing Arts",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6465)
                        },
                        new
                        {
                            Id = new Guid("f9167edb-5d9c-4e34-ad26-7a2630528682"),
                            CategoryId = new Guid("f177d65b-5eca-4137-b202-af672cd11d70"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6469),
                            Description = "Places & Travel",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6469)
                        },
                        new
                        {
                            Id = new Guid("4ecd4db0-0786-4594-a49b-86ab1362bc3c"),
                            CategoryId = new Guid("97735523-d87a-4b5f-9dd1-ab8289af2ae6"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6473),
                            Description = "Amateur",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6473)
                        },
                        new
                        {
                            Id = new Guid("375fa60d-8d6f-4684-a729-8a061ce2e062"),
                            CategoryId = new Guid("f0603194-6f45-4695-98c1-6288cffbfd94"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6477),
                            Description = "Management & Marketing",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6477)
                        },
                        new
                        {
                            Id = new Guid("5005a13d-45c9-40ea-b691-96ff5afa0e39"),
                            CategoryId = new Guid("f177d65b-5eca-4137-b202-af672cd11d70"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6481),
                            Description = "Personal Journals",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6481)
                        },
                        new
                        {
                            Id = new Guid("d9d8f925-cf6f-4d8d-9404-990609b312ce"),
                            CategoryId = new Guid("67d057a7-21b4-4462-a284-66ba62a6de1b"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6485),
                            Description = "Buddhism",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6485)
                        },
                        new
                        {
                            Id = new Guid("d5e38344-c701-406f-8762-9a793efb98d7"),
                            CategoryId = new Guid("67d057a7-21b4-4462-a284-66ba62a6de1b"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6489),
                            Description = "Christianity",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6489)
                        },
                        new
                        {
                            Id = new Guid("bd367623-40c3-48f2-9a59-9b526c643905"),
                            CategoryId = new Guid("67d057a7-21b4-4462-a284-66ba62a6de1b"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6493),
                            Description = "Hinduism",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6494)
                        },
                        new
                        {
                            Id = new Guid("797408d2-abbc-4d8d-92f4-9b74146d726d"),
                            CategoryId = new Guid("f0603194-6f45-4695-98c1-6288cffbfd94"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6497),
                            Description = "Business News",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6497)
                        },
                        new
                        {
                            Id = new Guid("7174aa7c-8df2-4f9f-84aa-9bc1e9793eda"),
                            CategoryId = new Guid("b13cddb1-feff-42e1-9c80-cb8ad4a5f374"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6501),
                            Description = "Other Games",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6502)
                        },
                        new
                        {
                            Id = new Guid("d69e2cc2-588f-49c5-933e-a6f963e79f32"),
                            CategoryId = new Guid("2e23f263-062a-43c3-9e27-fb7555fb8e76"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6505),
                            Description = "Local",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6506)
                        },
                        new
                        {
                            Id = new Guid("c8829517-5a62-4bcc-82cc-ab4a75c6312c"),
                            CategoryId = new Guid("ad31686b-794b-4ebb-99a8-cdc812ca7e83"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6509),
                            Description = "K-12",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6510)
                        },
                        new
                        {
                            Id = new Guid("7be75c87-d18a-45ee-92c3-ab6afce3e5db"),
                            CategoryId = new Guid("41b9ee87-a9ca-4305-8ed8-ee69a3dbcfc3"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6513),
                            Description = "Food",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6513)
                        },
                        new
                        {
                            Id = new Guid("1d5212bc-b31c-4130-bcea-ae7c9df2985f"),
                            CategoryId = new Guid("f177d65b-5eca-4137-b202-af672cd11d70"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6517),
                            Description = "Philosophy",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6517)
                        },
                        new
                        {
                            Id = new Guid("4966ec0c-3f53-4710-9f21-afb2371ab3e2"),
                            CategoryId = new Guid("c4911d87-2b6e-42ea-b771-be910cb01624"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6520),
                            Description = "Sexuality",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6521)
                        },
                        new
                        {
                            Id = new Guid("d8c5c265-1fa1-4244-9d76-b181bd936846"),
                            CategoryId = new Guid("ad31686b-794b-4ebb-99a8-cdc812ca7e83"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6524),
                            Description = "Education Technology",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6525)
                        },
                        new
                        {
                            Id = new Guid("7e371ab3-cc53-4f16-9de9-c2d10faa8938"),
                            CategoryId = new Guid("41b9ee87-a9ca-4305-8ed8-ee69a3dbcfc3"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6528),
                            Description = "Visual Arts",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6528)
                        },
                        new
                        {
                            Id = new Guid("c546f84f-643a-4f44-9bdf-ce4b44926e0a"),
                            CategoryId = new Guid("ad31686b-794b-4ebb-99a8-cdc812ca7e83"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6532),
                            Description = "Training",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6532)
                        },
                        new
                        {
                            Id = new Guid("149f1619-eb42-4d9b-a4d6-da68ec0541d9"),
                            CategoryId = new Guid("db829bfe-a8fe-458e-9b67-2b00f4794750"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6535),
                            Description = "Podcasting",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6536)
                        },
                        new
                        {
                            Id = new Guid("37f4f907-7b02-4268-8e38-db8700c1dc87"),
                            CategoryId = new Guid("67d057a7-21b4-4462-a284-66ba62a6de1b"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6539),
                            Description = "Judaism",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6540)
                        },
                        new
                        {
                            Id = new Guid("8114a581-24bb-451e-ba21-dcacd175bde4"),
                            CategoryId = new Guid("ad31686b-794b-4ebb-99a8-cdc812ca7e83"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6543),
                            Description = "Language Courses",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6543)
                        },
                        new
                        {
                            Id = new Guid("35cf95e2-6506-47ad-bd5d-df3b5e389a8f"),
                            CategoryId = new Guid("41b9ee87-a9ca-4305-8ed8-ee69a3dbcfc3"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6547),
                            Description = "Fashion & Beauty",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6547)
                        },
                        new
                        {
                            Id = new Guid("8fb81212-5911-4190-9635-e478e2119c0c"),
                            CategoryId = new Guid("67d057a7-21b4-4462-a284-66ba62a6de1b"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6551),
                            Description = "Spirituality",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6551)
                        },
                        new
                        {
                            Id = new Guid("23eb4b47-fc1d-45ac-9a21-e4ea5313f3d8"),
                            CategoryId = new Guid("b13cddb1-feff-42e1-9c80-cb8ad4a5f374"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6554),
                            Description = "Hobbies",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6555)
                        },
                        new
                        {
                            Id = new Guid("c7465257-d5b6-46f3-8521-e7a8f91e17b8"),
                            CategoryId = new Guid("f0603194-6f45-4695-98c1-6288cffbfd94"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6559),
                            Description = "Shopping",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6559)
                        },
                        new
                        {
                            Id = new Guid("cbcf3c5f-f7c9-44b3-9b2d-edc6523d8c3c"),
                            CategoryId = new Guid("c4911d87-2b6e-42ea-b771-be910cb01624"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6563),
                            Description = "Self-Help",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6563)
                        },
                        new
                        {
                            Id = new Guid("fb7c2755-4b09-4d9f-a457-eebb39abac3b"),
                            CategoryId = new Guid("f0603194-6f45-4695-98c1-6288cffbfd94"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6567),
                            Description = "Careers",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6567)
                        },
                        new
                        {
                            Id = new Guid("eb082ac8-856b-4bb0-a22f-f4062d4347d2"),
                            CategoryId = new Guid("db829bfe-a8fe-458e-9b67-2b00f4794750"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6571),
                            Description = "Software How-To",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6571)
                        },
                        new
                        {
                            Id = new Guid("56a5dc3b-3dc5-46d2-9972-f846a4ca9909"),
                            CategoryId = new Guid("67d057a7-21b4-4462-a284-66ba62a6de1b"),
                            CreateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6574),
                            Description = "Islam",
                            UpdateDate = new DateTime(2020, 7, 25, 13, 36, 2, 138, DateTimeKind.Utc).AddTicks(6575)
                        });
                });

            modelBuilder.Entity("PodNoms.Data.Models.UserRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("FromUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RequestText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.ToTable("UserRequests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PodNoms.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PodNoms.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PodNoms.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PodNoms.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PodNoms.Data.Models.AccountSubscription", b =>
                {
                    b.HasOne("PodNoms.Data.Models.ApplicationUser", "AppUser")
                        .WithMany("AccountSubscriptions")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("PodNoms.Data.Models.ActivityLogPodcastEntry", b =>
                {
                    b.HasOne("PodNoms.Data.Models.PodcastEntry", "PodcastEntry")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("PodcastEntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PodNoms.Data.Models.ApplicationUserSlugRedirects", b =>
                {
                    b.HasOne("PodNoms.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("PodNoms.Data.Models.ChatMessage", b =>
                {
                    b.HasOne("PodNoms.Data.Models.ApplicationUser", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId");

                    b.HasOne("PodNoms.Data.Models.ApplicationUser", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId");
                });

            modelBuilder.Entity("PodNoms.Data.Models.Donation", b =>
                {
                    b.HasOne("PodNoms.Data.Models.ApplicationUser", "AppUser")
                        .WithMany("Donations")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("PodNoms.Data.Models.EntryComment", b =>
                {
                    b.HasOne("PodNoms.Data.Models.PodcastEntry", "PodcastEntry")
                        .WithMany("Comments")
                        .HasForeignKey("PodcastEntryId");
                });

            modelBuilder.Entity("PodNoms.Data.Models.IssuedApiKey", b =>
                {
                    b.HasOne("PodNoms.Data.Models.ApplicationUser", "IssuedTo")
                        .WithMany("IssuedApiKeys")
                        .HasForeignKey("IssuedToId");
                });

            modelBuilder.Entity("PodNoms.Data.Models.Notifications.Notification", b =>
                {
                    b.HasOne("PodNoms.Data.Models.Podcast", "Podcast")
                        .WithMany("Notifications")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PodNoms.Data.Models.Notifications.NotificationLog", b =>
                {
                    b.HasOne("PodNoms.Data.Models.Notifications.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PodNoms.Data.Models.PatreonToken", b =>
                {
                    b.HasOne("PodNoms.Data.Models.ApplicationUser", "AppUser")
                        .WithOne("PatreonToken")
                        .HasForeignKey("PodNoms.Data.Models.PatreonToken", "AppUserId");
                });

            modelBuilder.Entity("PodNoms.Data.Models.Playlist", b =>
                {
                    b.HasOne("PodNoms.Data.Models.Podcast", "Podcast")
                        .WithMany()
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PodNoms.Data.Models.Podcast", b =>
                {
                    b.HasOne("PodNoms.Data.Models.ApplicationUser", "AppUser")
                        .WithMany("Podcasts")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PodNoms.Data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("PodNoms.Data.Models.PodcastAggregator", b =>
                {
                    b.HasOne("PodNoms.Data.Models.Podcast", "Podcast")
                        .WithMany("Aggregators")
                        .HasForeignKey("PodcastId");
                });

            modelBuilder.Entity("PodNoms.Data.Models.PodcastEntry", b =>
                {
                    b.HasOne("PodNoms.Data.Models.Playlist", "Playlist")
                        .WithMany("PodcastEntries")
                        .HasForeignKey("PlaylistId");

                    b.HasOne("PodNoms.Data.Models.Podcast", "Podcast")
                        .WithMany("PodcastEntries")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PodNoms.Data.Models.PodcastEntrySharingLink", b =>
                {
                    b.HasOne("PodNoms.Data.Models.PodcastEntry", "PodcastEntry")
                        .WithMany("SharingLinks")
                        .HasForeignKey("PodcastEntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PodNoms.Data.Models.RefreshToken", b =>
                {
                    b.HasOne("PodNoms.Data.Models.ApplicationUser", "AppUser")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("PodNoms.Data.Models.Subcategory", b =>
                {
                    b.HasOne("PodNoms.Data.Models.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PodNoms.Data.Models.Podcast", null)
                        .WithMany("Subcategories")
                        .HasForeignKey("PodcastId");
                });

            modelBuilder.Entity("PodNoms.Data.Models.UserRequest", b =>
                {
                    b.HasOne("PodNoms.Data.Models.ApplicationUser", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId");
                });
#pragma warning restore 612, 618
        }
    }
}

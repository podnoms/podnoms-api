// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PodNoms.Common.Persistence;

namespace PodNoms.Comon.Migrations {
    [DbContext(typeof(PodNomsDbContext))]
    [Migration("20200717025639_AddRoleAndCategorySeeds")]
    partial class AddRoleAndCategorySeeds {
        protected override void BuildTargetModel(ModelBuilder modelBuilder) {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b => {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedName")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");

                b.ToTable("AspNetRoles");

                b.HasData(
                    new {
                        Id = "f1c6e6a8-2461-48f2-ab7a-569a3b75b280",
                        ConcurrencyStamp = "5bbeb1b1-09b6-45ab-8fd2-7131445bb72b",
                        Name = "website-admin",
                        NormalizedName = "WEBSITE-ADMIN"
                    },
                    new {
                        Id = "dba18578-271a-40de-8cb3-e21f97fcf159",
                        ConcurrencyStamp = "da355d84-9e05-4c71-8356-cc433ca4e42c",
                        Name = "catastrophic-api-calls-allowed",
                        NormalizedName = "CATASTROPHIC-API-CALLS-ALLOWED"
                    });
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b => {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("RoleId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b => {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b => {
                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderKey")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b => {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("RoleId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b => {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Value")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens");
            });

            modelBuilder.Entity("PodNoms.Data.Models.AccountSubscription", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<long>("Amount")
                    .HasColumnType("bigint");

                b.Property<string>("AppUserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<DateTime>("EndDate")
                    .HasColumnType("datetime2");

                b.Property<string>("ReceiptURL")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("StartDate")
                    .HasColumnType("datetime2");

                b.Property<string>("TransactionId")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("Type")
                    .HasColumnType("int");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<bool>("WasSuccessful")
                    .HasColumnType("bit");

                b.HasKey("Id");

                b.HasIndex("AppUserId");

                b.ToTable("AccountSubscriptions");
            });

            modelBuilder.Entity("PodNoms.Data.Models.ActivityLogPodcastEntry", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("City")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClientAddress")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("CountryCode")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("CountryName")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("ExtraInfo")
                    .HasColumnType("nvarchar(max)");

                b.Property<double?>("Latitude")
                    .HasColumnType("float");

                b.Property<double?>("Longitude")
                    .HasColumnType("float");

                b.Property<Guid?>("PodcastEntryId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Referrer")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("RegionCode")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("RegionName")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("UserAgent")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Zip")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("PodcastEntryId");

                b.ToTable("ActivityLogPodcastEntry");
            });

            modelBuilder.Entity("PodNoms.Data.Models.ApplicationUser", b => {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("int");

                b.Property<string>("City")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("CountryCode")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("CountryName")
                    .HasColumnType("nvarchar(max)");

                b.Property<long?>("DiskQuota")
                    .HasColumnType("bigint");

                b.Property<string>("Email")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("bit");

                b.Property<int>("EmailNotificationOptions")
                    .HasColumnType("int");

                b.Property<long?>("FacebookId")
                    .HasColumnType("bigint");

                b.Property<string>("FirstName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("IpAddress")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("IsAdmin")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bit")
                    .HasDefaultValue(false);

                b.Property<string>("LastName")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("LastSeen")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<double?>("Latitude")
                    .HasColumnType("float");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("bit");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("datetimeoffset");

                b.Property<double?>("Longitude")
                    .HasColumnType("float");

                b.Property<string>("NormalizedEmail")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedUserName")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<string>("PasswordHash")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("PictureUrl")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("RegionCode")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("RegionName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Slug")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("TwitterHandle")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("bit");

                b.Property<string>("UserName")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<string>("Zip")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasName("UserNameIndex")
                    .HasFilter("[NormalizedUserName] IS NOT NULL");

                b.HasIndex("Slug")
                    .IsUnique()
                    .HasFilter("[Slug] IS NOT NULL");

                b.ToTable("AspNetUsers");
            });

            modelBuilder.Entity("PodNoms.Data.Models.ApplicationUserSlugRedirects", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("ApplicationUserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("OldSlug")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.HasKey("Id");

                b.HasIndex("ApplicationUserId");

                b.ToTable("ApplicationUserSlugRedirects");
            });

            modelBuilder.Entity("PodNoms.Data.Models.BoilerPlate", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Content")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("Key")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Title")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.HasKey("Id");

                b.HasIndex("Key")
                    .IsUnique()
                    .HasFilter("[Key] IS NOT NULL");

                b.ToTable("BoilerPlates");
            });

            modelBuilder.Entity("PodNoms.Data.Models.Category", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.HasKey("Id");

                b.ToTable("Categories");

                b.HasData(
                    new {
                        Id = new Guid("29c0716a-94bc-4b79-bb7a-1acb2d872101"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(606),
                        Description = "Comedy",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(607)
                    },
                    new {
                        Id = new Guid("db829bfe-a8fe-458e-9b67-2b00f4794750"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1103),
                        Description = "Technology",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1104)
                    },
                    new {
                        Id = new Guid("50495352-2339-4498-aad3-3f8c85f6ac69"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1124),
                        Description = "Science & Medicine",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1124)
                    },
                    new {
                        Id = new Guid("f0603194-6f45-4695-98c1-6288cffbfd94"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1127),
                        Description = "Business",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1127)
                    },
                    new {
                        Id = new Guid("67d057a7-21b4-4462-a284-66ba62a6de1b"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1130),
                        Description = "Religion & Spirituality",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1130)
                    },
                    new {
                        Id = new Guid("3219621b-8311-4b65-bb48-6f68fba4957c"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1132),
                        Description = "Kids & Family",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1132)
                    },
                    new {
                        Id = new Guid("a6aa8e20-8729-4698-a254-976012afdbf3"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1135),
                        Description = "TV & Film",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1135)
                    },
                    new {
                        Id = new Guid("97735523-d87a-4b5f-9dd1-ab8289af2ae6"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1138),
                        Description = "Sports & Recreation",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1138)
                    },
                    new {
                        Id = new Guid("f177d65b-5eca-4137-b202-af672cd11d70"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1140),
                        Description = "Society & Culture",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1140)
                    },
                    new {
                        Id = new Guid("27fb7005-b75c-490b-ae13-bcc88525be65"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1142),
                        Description = "Music",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1142)
                    },
                    new {
                        Id = new Guid("c4911d87-2b6e-42ea-b771-be910cb01624"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1145),
                        Description = "Health",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1145)
                    },
                    new {
                        Id = new Guid("5e023a7a-461d-46c6-bca8-c9049f6d2ec5"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1147),
                        Description = "News & Politics",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1147)
                    },
                    new {
                        Id = new Guid("b13cddb1-feff-42e1-9c80-cb8ad4a5f374"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1149),
                        Description = "Games & Hobbies",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1150)
                    },
                    new {
                        Id = new Guid("ad31686b-794b-4ebb-99a8-cdc812ca7e83"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1152),
                        Description = "Education",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1152)
                    },
                    new {
                        Id = new Guid("41b9ee87-a9ca-4305-8ed8-ee69a3dbcfc3"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1154),
                        Description = "Arts",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1154)
                    },
                    new {
                        Id = new Guid("2e23f263-062a-43c3-9e27-fb7555fb8e76"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1156),
                        Description = "Government & Organizations",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 448, DateTimeKind.Utc).AddTicks(1156)
                    });
            });

            modelBuilder.Entity("PodNoms.Data.Models.ChatMessage", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("FromUserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Message")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime?>("MessageSeen")
                    .HasColumnType("datetime2");

                b.Property<string>("ToUserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.HasKey("Id");

                b.HasIndex("FromUserId");

                b.HasIndex("ToUserId");

                b.ToTable("ChatMessages");
            });

            modelBuilder.Entity("PodNoms.Data.Models.Donation", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<long>("Amount")
                    .HasColumnType("bigint");

                b.Property<string>("AppUserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.HasKey("Id");

                b.HasIndex("AppUserId");

                b.ToTable("Donations");
            });

            modelBuilder.Entity("PodNoms.Data.Models.EntryComment", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("CommentText")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("FromUser")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("FromUserEmail")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("IsSpam")
                    .HasColumnType("bit");

                b.Property<Guid?>("PodcastEntryId")
                    .HasColumnType("uniqueidentifier");

                b.Property<int?>("Timestamp")
                    .HasColumnType("int");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.HasKey("Id");

                b.HasIndex("PodcastEntryId");

                b.ToTable("EntryComments");
            });

            modelBuilder.Entity("PodNoms.Data.Models.IssuedApiKey", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<DateTime?>("Expires")
                    .HasColumnType("datetime2");

                b.Property<bool>("IsValid")
                    .HasColumnType("bit");

                b.Property<string>("IssuedToId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Key")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(25)")
                    .HasMaxLength(25);

                b.Property<string>("Prefix")
                    .HasColumnType("nvarchar(7)")
                    .HasMaxLength(7);

                b.Property<string>("Scopes")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.HasKey("Id");

                b.HasIndex("IssuedToId");

                b.ToTable("IssuedApiKeys");
            });

            modelBuilder.Entity("PodNoms.Data.Models.Notifications.Notification", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Config")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<Guid>("PodcastId")
                    .HasColumnType("uniqueidentifier");

                b.Property<int>("Type")
                    .HasColumnType("int");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.HasKey("Id");

                b.HasIndex("PodcastId");

                b.ToTable("Notifications");
            });

            modelBuilder.Entity("PodNoms.Data.Models.Notifications.NotificationLog", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("Log")
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid>("NotificationId")
                    .HasColumnType("uniqueidentifier");

                b.Property<bool>("Succeeded")
                    .HasColumnType("bit");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.HasKey("Id");

                b.HasIndex("NotificationId");

                b.ToTable("NotificationLogs");
            });

            modelBuilder.Entity("PodNoms.Data.Models.Playlist", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<Guid>("PodcastId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("SourceUrl")
                    .HasColumnType("nvarchar(450)");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.HasKey("Id");

                b.HasIndex("PodcastId");

                b.HasIndex("SourceUrl")
                    .IsUnique()
                    .HasFilter("[SourceUrl] IS NOT NULL");

                b.ToTable("Playlists");
            });

            modelBuilder.Entity("PodNoms.Data.Models.Podcast", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("AppUserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.Property<byte[]>("AuthPassword")
                    .HasColumnType("varbinary(max)");

                b.Property<byte[]>("AuthPasswordSalt")
                    .HasColumnType("varbinary(max)");

                b.Property<string>("AuthUserName")
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid?>("CategoryId")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("CustomDomain")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("CustomRssDomain")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("FacebookUrl")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("GoogleAnalyticsTrackingId")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("Private")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bit")
                    .HasDefaultValue(false);

                b.Property<string>("PublicTitle")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Slug")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Title")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("TwitterUrl")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.HasKey("Id");

                b.HasIndex("AppUserId");

                b.HasIndex("CategoryId");

                b.HasIndex("Slug")
                    .IsUnique()
                    .HasFilter("[Slug] IS NOT NULL");

                b.ToTable("Podcasts");
            });

            modelBuilder.Entity("PodNoms.Data.Models.PodcastAggregator", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("ImageUrl")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid?>("PodcastId")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("Url")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("PodcastId");

                b.ToTable("PodcastAggregators");
            });

            modelBuilder.Entity("PodNoms.Data.Models.PodcastEntry", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<long>("AudioFileSize")
                    .HasColumnType("bigint");

                b.Property<float>("AudioLength")
                    .HasColumnType("real");

                b.Property<string>("AudioUrl")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Author")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ImageUrl")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("MetadataStatus")
                    .HasColumnType("int");

                b.Property<Guid?>("PlaylistId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("PodcastId")
                    .HasColumnType("uniqueidentifier");

                b.Property<bool>("Processed")
                    .HasColumnType("bit");

                b.Property<string>("ProcessingPayload")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("ProcessingStatus")
                    .HasColumnType("int");

                b.Property<int>("ShareOptions")
                    .HasColumnType("int");

                b.Property<string>("Slug")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime?>("SourceCreateDate")
                    .HasColumnType("datetime2");

                b.Property<string>("SourceItemId")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("SourceUrl")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Title")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<bool>("WaveformGenerated")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bit")
                    .HasDefaultValue(false);

                b.HasKey("Id");

                b.HasIndex("PlaylistId");

                b.HasIndex("PodcastId");

                b.ToTable("PodcastEntries");
            });

            modelBuilder.Entity("PodNoms.Data.Models.PodcastEntrySharingLink", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("LinkId")
                    .HasColumnType("nvarchar(450)");

                b.Property<int>("LinkIndex")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<Guid?>("PodcastEntryId")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<DateTime?>("ValidFrom")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("ValidTo")
                    .HasColumnType("datetime2");

                b.HasKey("Id");

                b.HasIndex("LinkId")
                    .IsUnique()
                    .HasFilter("[LinkId] IS NOT NULL");

                b.HasIndex("LinkIndex")
                    .IsUnique();

                b.HasIndex("PodcastEntryId");

                b.ToTable("PodcastEntrySharingLinks");
            });

            modelBuilder.Entity("PodNoms.Data.Models.RefreshToken", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("AppUserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<DateTime>("Expires")
                    .HasColumnType("datetime2");

                b.Property<string>("RemoteIpAddress")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Token")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.HasKey("Id");

                b.HasIndex("AppUserId");

                b.ToTable("RefreshTokens");
            });

            modelBuilder.Entity("PodNoms.Data.Models.ServerConfig", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("Key")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("Value")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("ServerConfig", "admin");
            });

            modelBuilder.Entity("PodNoms.Data.Models.ServerShowcase", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(max)");

                b.Property<long?>("DiskSpaceThreshold")
                    .HasColumnType("bigint");

                b.Property<DateTime>("EndDate")
                    .HasColumnType("datetime2");

                b.Property<int?>("EntryCountThreshold")
                    .HasColumnType("int");

                b.Property<bool>("IsActive")
                    .HasColumnType("bit");

                b.Property<int?>("PodcastCountThreshold")
                    .HasColumnType("int");

                b.Property<DateTime>("StartDate")
                    .HasColumnType("datetime2");

                b.Property<string>("Title")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("Url")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("ServerShowcases");
            });

            modelBuilder.Entity("PodNoms.Data.Models.Subcategory", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("CategoryId")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid?>("PodcastId")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.HasIndex("PodcastId");

                b.ToTable("Subcategories");

                b.HasData(
                    new {
                        Id = new Guid("1f4b0b76-d7b8-404c-af32-3428fc488e30"),
                        CategoryId = new Guid("b13cddb1-feff-42e1-9c80-cb8ad4a5f374"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(3775),
                        Description = "Video Games",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(3776)
                    },
                    new {
                        Id = new Guid("84ed0b38-616d-4926-90c2-3cc7ae2f8e4e"),
                        CategoryId = new Guid("97735523-d87a-4b5f-9dd1-ab8289af2ae6"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4176),
                        Description = "Professional",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4177)
                    },
                    new {
                        Id = new Guid("867ae49c-ade1-41b9-ba18-3f4801ec18ee"),
                        CategoryId = new Guid("c4911d87-2b6e-42ea-b771-be910cb01624"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4195),
                        Description = "Fitness & Nutrition",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4195)
                    },
                    new {
                        Id = new Guid("b4284990-c542-48e4-a000-42d27202153b"),
                        CategoryId = new Guid("2e23f263-062a-43c3-9e27-fb7555fb8e76"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4200),
                        Description = "Non-Profit",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4200)
                    },
                    new {
                        Id = new Guid("c950eaac-f164-4f3c-8384-459679130aef"),
                        CategoryId = new Guid("97735523-d87a-4b5f-9dd1-ab8289af2ae6"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4204),
                        Description = "Outdoor",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4204)
                    },
                    new {
                        Id = new Guid("df0063a6-31ef-4f9a-be23-4f9178291bb3"),
                        CategoryId = new Guid("ad31686b-794b-4ebb-99a8-cdc812ca7e83"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4208),
                        Description = "Higher Education",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4208)
                    },
                    new {
                        Id = new Guid("2488b878-124a-42f9-a761-53daa1eefde1"),
                        CategoryId = new Guid("41b9ee87-a9ca-4305-8ed8-ee69a3dbcfc3"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4212),
                        Description = "Literature",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4212)
                    },
                    new {
                        Id = new Guid("5c40fa5a-72df-475b-bfa8-561955145762"),
                        CategoryId = new Guid("67d057a7-21b4-4462-a284-66ba62a6de1b"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4215),
                        Description = "Other",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4216)
                    },
                    new {
                        Id = new Guid("201fb42b-e241-4e16-bea5-5df768064402"),
                        CategoryId = new Guid("f0603194-6f45-4695-98c1-6288cffbfd94"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4219),
                        Description = "Investing",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4219)
                    },
                    new {
                        Id = new Guid("4f006295-e8ea-4a87-92e0-69e32f8d3ad9"),
                        CategoryId = new Guid("b13cddb1-feff-42e1-9c80-cb8ad4a5f374"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4223),
                        Description = "Aviation",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4223)
                    },
                    new {
                        Id = new Guid("8b2a590b-bb59-4f30-acb2-72fa01985e4b"),
                        CategoryId = new Guid("50495352-2339-4498-aad3-3f8c85f6ac69"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4226),
                        Description = "Social Sciences",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4226)
                    },
                    new {
                        Id = new Guid("3e3f77a4-4cd3-4644-ace1-7923e84d403d"),
                        CategoryId = new Guid("41b9ee87-a9ca-4305-8ed8-ee69a3dbcfc3"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4230),
                        Description = "Performing Arts",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4230)
                    },
                    new {
                        Id = new Guid("f9167edb-5d9c-4e34-ad26-7a2630528682"),
                        CategoryId = new Guid("f177d65b-5eca-4137-b202-af672cd11d70"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4233),
                        Description = "Places & Travel",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4233)
                    },
                    new {
                        Id = new Guid("4ecd4db0-0786-4594-a49b-86ab1362bc3c"),
                        CategoryId = new Guid("97735523-d87a-4b5f-9dd1-ab8289af2ae6"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4237),
                        Description = "Amateur",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4237)
                    },
                    new {
                        Id = new Guid("375fa60d-8d6f-4684-a729-8a061ce2e062"),
                        CategoryId = new Guid("f0603194-6f45-4695-98c1-6288cffbfd94"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4240),
                        Description = "Management & Marketing",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4241)
                    },
                    new {
                        Id = new Guid("5005a13d-45c9-40ea-b691-96ff5afa0e39"),
                        CategoryId = new Guid("f177d65b-5eca-4137-b202-af672cd11d70"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4244),
                        Description = "Personal Journals",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4244)
                    },
                    new {
                        Id = new Guid("d9d8f925-cf6f-4d8d-9404-990609b312ce"),
                        CategoryId = new Guid("67d057a7-21b4-4462-a284-66ba62a6de1b"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4248),
                        Description = "Buddhism",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4248)
                    },
                    new {
                        Id = new Guid("d5e38344-c701-406f-8762-9a793efb98d7"),
                        CategoryId = new Guid("67d057a7-21b4-4462-a284-66ba62a6de1b"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4251),
                        Description = "Christianity",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4252)
                    },
                    new {
                        Id = new Guid("bd367623-40c3-48f2-9a59-9b526c643905"),
                        CategoryId = new Guid("67d057a7-21b4-4462-a284-66ba62a6de1b"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4255),
                        Description = "Hinduism",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4255)
                    },
                    new {
                        Id = new Guid("797408d2-abbc-4d8d-92f4-9b74146d726d"),
                        CategoryId = new Guid("f0603194-6f45-4695-98c1-6288cffbfd94"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4259),
                        Description = "Business News",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4259)
                    },
                    new {
                        Id = new Guid("7174aa7c-8df2-4f9f-84aa-9bc1e9793eda"),
                        CategoryId = new Guid("b13cddb1-feff-42e1-9c80-cb8ad4a5f374"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4263),
                        Description = "Other Games",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4263)
                    },
                    new {
                        Id = new Guid("d69e2cc2-588f-49c5-933e-a6f963e79f32"),
                        CategoryId = new Guid("2e23f263-062a-43c3-9e27-fb7555fb8e76"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4266),
                        Description = "Local",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4266)
                    },
                    new {
                        Id = new Guid("c8829517-5a62-4bcc-82cc-ab4a75c6312c"),
                        CategoryId = new Guid("ad31686b-794b-4ebb-99a8-cdc812ca7e83"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4270),
                        Description = "K-12",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4270)
                    },
                    new {
                        Id = new Guid("7be75c87-d18a-45ee-92c3-ab6afce3e5db"),
                        CategoryId = new Guid("41b9ee87-a9ca-4305-8ed8-ee69a3dbcfc3"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4274),
                        Description = "Food",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4274)
                    },
                    new {
                        Id = new Guid("1d5212bc-b31c-4130-bcea-ae7c9df2985f"),
                        CategoryId = new Guid("f177d65b-5eca-4137-b202-af672cd11d70"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4277),
                        Description = "Philosophy",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4278)
                    },
                    new {
                        Id = new Guid("4966ec0c-3f53-4710-9f21-afb2371ab3e2"),
                        CategoryId = new Guid("c4911d87-2b6e-42ea-b771-be910cb01624"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4281),
                        Description = "Sexuality",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4281)
                    },
                    new {
                        Id = new Guid("d8c5c265-1fa1-4244-9d76-b181bd936846"),
                        CategoryId = new Guid("ad31686b-794b-4ebb-99a8-cdc812ca7e83"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4285),
                        Description = "Education Technology",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4285)
                    },
                    new {
                        Id = new Guid("7e371ab3-cc53-4f16-9de9-c2d10faa8938"),
                        CategoryId = new Guid("41b9ee87-a9ca-4305-8ed8-ee69a3dbcfc3"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4289),
                        Description = "Visual Arts",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4289)
                    },
                    new {
                        Id = new Guid("c546f84f-643a-4f44-9bdf-ce4b44926e0a"),
                        CategoryId = new Guid("ad31686b-794b-4ebb-99a8-cdc812ca7e83"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4293),
                        Description = "Training",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4293)
                    },
                    new {
                        Id = new Guid("149f1619-eb42-4d9b-a4d6-da68ec0541d9"),
                        CategoryId = new Guid("db829bfe-a8fe-458e-9b67-2b00f4794750"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4296),
                        Description = "Podcasting",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4297)
                    },
                    new {
                        Id = new Guid("37f4f907-7b02-4268-8e38-db8700c1dc87"),
                        CategoryId = new Guid("67d057a7-21b4-4462-a284-66ba62a6de1b"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4300),
                        Description = "Judaism",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4300)
                    },
                    new {
                        Id = new Guid("8114a581-24bb-451e-ba21-dcacd175bde4"),
                        CategoryId = new Guid("ad31686b-794b-4ebb-99a8-cdc812ca7e83"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4304),
                        Description = "Language Courses",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4304)
                    },
                    new {
                        Id = new Guid("35cf95e2-6506-47ad-bd5d-df3b5e389a8f"),
                        CategoryId = new Guid("41b9ee87-a9ca-4305-8ed8-ee69a3dbcfc3"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4308),
                        Description = "Fashion & Beauty",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4308)
                    },
                    new {
                        Id = new Guid("8fb81212-5911-4190-9635-e478e2119c0c"),
                        CategoryId = new Guid("67d057a7-21b4-4462-a284-66ba62a6de1b"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4312),
                        Description = "Spirituality",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4312)
                    },
                    new {
                        Id = new Guid("23eb4b47-fc1d-45ac-9a21-e4ea5313f3d8"),
                        CategoryId = new Guid("b13cddb1-feff-42e1-9c80-cb8ad4a5f374"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4315),
                        Description = "Hobbies",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4316)
                    },
                    new {
                        Id = new Guid("c7465257-d5b6-46f3-8521-e7a8f91e17b8"),
                        CategoryId = new Guid("f0603194-6f45-4695-98c1-6288cffbfd94"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4319),
                        Description = "Shopping",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4319)
                    },
                    new {
                        Id = new Guid("cbcf3c5f-f7c9-44b3-9b2d-edc6523d8c3c"),
                        CategoryId = new Guid("c4911d87-2b6e-42ea-b771-be910cb01624"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4322),
                        Description = "Self-Help",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4323)
                    },
                    new {
                        Id = new Guid("fb7c2755-4b09-4d9f-a457-eebb39abac3b"),
                        CategoryId = new Guid("f0603194-6f45-4695-98c1-6288cffbfd94"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4326),
                        Description = "Careers",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4326)
                    },
                    new {
                        Id = new Guid("eb082ac8-856b-4bb0-a22f-f4062d4347d2"),
                        CategoryId = new Guid("db829bfe-a8fe-458e-9b67-2b00f4794750"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4330),
                        Description = "Software How-To",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4330)
                    },
                    new {
                        Id = new Guid("56a5dc3b-3dc5-46d2-9972-f846a4ca9909"),
                        CategoryId = new Guid("67d057a7-21b4-4462-a284-66ba62a6de1b"),
                        CreateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4334),
                        Description = "Islam",
                        UpdateDate = new DateTime(2020, 7, 17, 2, 56, 39, 449, DateTimeKind.Utc).AddTicks(4334)
                    });
            });

            modelBuilder.Entity("PodNoms.Data.Models.UserRequest", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreateDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.Property<string>("FromUserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("RequestText")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("RequestType")
                    .HasColumnType("int");

                b.Property<DateTime>("UpdateDate")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("getdate()");

                b.HasKey("Id");

                b.HasIndex("FromUserId");

                b.ToTable("UserRequests");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b => {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b => {
                b.HasOne("PodNoms.Data.Models.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b => {
                b.HasOne("PodNoms.Data.Models.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b => {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("PodNoms.Data.Models.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b => {
                b.HasOne("PodNoms.Data.Models.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("PodNoms.Data.Models.AccountSubscription", b => {
                b.HasOne("PodNoms.Data.Models.ApplicationUser", "AppUser")
                    .WithMany("AccountSubscriptions")
                    .HasForeignKey("AppUserId");
            });

            modelBuilder.Entity("PodNoms.Data.Models.ActivityLogPodcastEntry", b => {
                b.HasOne("PodNoms.Data.Models.PodcastEntry", "PodcastEntry")
                    .WithMany("ActivityLogs")
                    .HasForeignKey("PodcastEntryId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("PodNoms.Data.Models.ApplicationUserSlugRedirects", b => {
                b.HasOne("PodNoms.Data.Models.ApplicationUser", "ApplicationUser")
                    .WithMany()
                    .HasForeignKey("ApplicationUserId");
            });

            modelBuilder.Entity("PodNoms.Data.Models.ChatMessage", b => {
                b.HasOne("PodNoms.Data.Models.ApplicationUser", "FromUser")
                    .WithMany()
                    .HasForeignKey("FromUserId");

                b.HasOne("PodNoms.Data.Models.ApplicationUser", "ToUser")
                    .WithMany()
                    .HasForeignKey("ToUserId");
            });

            modelBuilder.Entity("PodNoms.Data.Models.Donation", b => {
                b.HasOne("PodNoms.Data.Models.ApplicationUser", "AppUser")
                    .WithMany("Donations")
                    .HasForeignKey("AppUserId");
            });

            modelBuilder.Entity("PodNoms.Data.Models.EntryComment", b => {
                b.HasOne("PodNoms.Data.Models.PodcastEntry", "PodcastEntry")
                    .WithMany("Comments")
                    .HasForeignKey("PodcastEntryId");
            });

            modelBuilder.Entity("PodNoms.Data.Models.IssuedApiKey", b => {
                b.HasOne("PodNoms.Data.Models.ApplicationUser", "IssuedTo")
                    .WithMany()
                    .HasForeignKey("IssuedToId");
            });

            modelBuilder.Entity("PodNoms.Data.Models.Notifications.Notification", b => {
                b.HasOne("PodNoms.Data.Models.Podcast", "Podcast")
                    .WithMany("Notifications")
                    .HasForeignKey("PodcastId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("PodNoms.Data.Models.Notifications.NotificationLog", b => {
                b.HasOne("PodNoms.Data.Models.Notifications.Notification", "Notification")
                    .WithMany()
                    .HasForeignKey("NotificationId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("PodNoms.Data.Models.Playlist", b => {
                b.HasOne("PodNoms.Data.Models.Podcast", "Podcast")
                    .WithMany()
                    .HasForeignKey("PodcastId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("PodNoms.Data.Models.Podcast", b => {
                b.HasOne("PodNoms.Data.Models.ApplicationUser", "AppUser")
                    .WithMany("Podcasts")
                    .HasForeignKey("AppUserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("PodNoms.Data.Models.Category", "Category")
                    .WithMany()
                    .HasForeignKey("CategoryId");
            });

            modelBuilder.Entity("PodNoms.Data.Models.PodcastAggregator", b => {
                b.HasOne("PodNoms.Data.Models.Podcast", "Podcast")
                    .WithMany("Aggregators")
                    .HasForeignKey("PodcastId");
            });

            modelBuilder.Entity("PodNoms.Data.Models.PodcastEntry", b => {
                b.HasOne("PodNoms.Data.Models.Playlist", null)
                    .WithMany("PodcastEntries")
                    .HasForeignKey("PlaylistId");

                b.HasOne("PodNoms.Data.Models.Podcast", "Podcast")
                    .WithMany("PodcastEntries")
                    .HasForeignKey("PodcastId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("PodNoms.Data.Models.PodcastEntrySharingLink", b => {
                b.HasOne("PodNoms.Data.Models.PodcastEntry", "PodcastEntry")
                    .WithMany("SharingLinks")
                    .HasForeignKey("PodcastEntryId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("PodNoms.Data.Models.RefreshToken", b => {
                b.HasOne("PodNoms.Data.Models.ApplicationUser", "AppUser")
                    .WithMany("RefreshTokens")
                    .HasForeignKey("AppUserId");
            });

            modelBuilder.Entity("PodNoms.Data.Models.Subcategory", b => {
                b.HasOne("PodNoms.Data.Models.Category", "Category")
                    .WithMany("Subcategories")
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("PodNoms.Data.Models.Podcast", null)
                    .WithMany("Subcategories")
                    .HasForeignKey("PodcastId");
            });

            modelBuilder.Entity("PodNoms.Data.Models.UserRequest", b => {
                b.HasOne("PodNoms.Data.Models.ApplicationUser", "FromUser")
                    .WithMany()
                    .HasForeignKey("FromUserId");
            });
#pragma warning restore 612, 618
        }
    }
}
